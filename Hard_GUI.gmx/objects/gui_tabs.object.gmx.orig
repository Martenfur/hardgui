<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>1</depth>
  <persistent>0</persistent>
  <parentName>gui_parent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited()

mysliderV=gui_createSlider(32,32,1,128,256,0,NOFORM)

w=256
h=512

tabScrollSpd=5

tabActive=  0
tabOffset_x=0
tabDrag=    0
tabDragDX=  0

b1Check=0
b2Check=0

/*
Tab name.
Tab length.
Tab form.
*/

draw_set_font(font)

tabs=ds_list_create()

form1=gui_createForm(x,y,w,256,noone,noone,NOFORM)
form2=gui_createForm(x,y,w,128,noone,noone,NOFORM)

gui_tabAdd(id,"Tab.",form1)
gui_tabAdd(id,"Foxes! \^0^/",form2)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>_gui_clickInit()

//GRAB
if mbCheckPress
{
  if point_in_rectangle(mouseFormX,mouseFormY,x+ARROW_MEDIUM_SIZE,y,x+w-ARROW_MEDIUM_SIZE,y+ARROW_MEDIUM_SIZE)
  {
    tabDragDX=(mouseFormX-x-tabOffset_x-ARROW_MEDIUM_SIZE)

    tabDrag=     1
    mbCheckPress=0
  }
  else
  {tabDrag=0}
}
//GRAB

b1Check=0
b2Check=0

//DRAG
if tabDrag
{tabOffset_x=mouseFormX-(x+ARROW_MEDIUM_SIZE+tabDragDX)}
//DRAG
else
{
  //ARROWS
  if mbCheck
  {
    //left
    if point_in_rectangle(mouseFormX,mouseFormY,x,                  y,
                                                x+ARROW_MEDIUM_SIZE,y+ARROW_MEDIUM_SIZE)
    {
      tabOffset_x-=tabScrollSpd
      b1Check=1
    }
    //left
  
    //right
    if point_in_rectangle(mouseFormX,mouseFormY,x+w-ARROW_MEDIUM_SIZE,y,
                                                x+w,                  y+ARROW_MEDIUM_SIZE)
    {
      tabOffset_x+=tabScrollSpd
      b2Check=1
    }
    //right
  }
  //ARROWS 
}

//DRAG RELEASE
if mbCheckReleaseGlobal
{tabDrag=0}
//DRAG RELEASE

//WHEEL SCROLLING
if !tabDrag &amp;&amp; !b1Check &amp;&amp; !b2Check 
&amp;&amp; point_in_rectangle(mouseFormX,mouseFormY,x,y,x+w,y+ARROW_MEDIUM_SIZE)
&amp;&amp; myform.clickable=1
{tabOffset_x+=tabScrollSpd*(mouse_wheel_down()-mouse_wheel_up())}
//WHEEL SCROLLING

//Getting summary length of all tabs.
var tabsL=0;
var tabCur;
for(var i=0; i&lt;ds_list_size(tabs) i+=1)
{
 tabCur=tabs[|i]
 tabsL+=tabCur[|1]
}
//Getting summary length of all tabs.  

if tabsL&lt;=w-ARROW_MEDIUM_SIZE*2
{
  tabDrag=0
  tabOffset_x=0
}
else
{  
  if tabOffset_x&gt;0
  {tabOffset_x=0}
  if tabOffset_x+tabsL&lt;w-ARROW_MEDIUM_SIZE*2
  {tabOffset_x=w-ARROW_MEDIUM_SIZE*2-tabsL}
}





</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_sprite_stretched_ext(s_pixel,0,x,y,w,ARROW_MEDIUM_SIZE,C_DARK,1) //Base.


//BUTTONS//////////////////////////////////////////////////////////////
var cArrow,cBack;
if b1Check
{
  cArrow=C_DARK
  cBack= C_BRIGHT
}
else
{
  cArrow=C_BRIGHT
  cBack= C_DARK
}
draw_sprite_stretched_ext(s_pixel,0,round(x),round(y),ARROW_MEDIUM_SIZE,ARROW_MEDIUM_SIZE,cBack,1)
draw_sprite_ext(s_gui_arrow_medium,0,x,  y+ARROW_MEDIUM_SIZE,1,1, 90,cArrow,1)

//

if b2Check
{
  cArrow=C_DARK
  cBack= C_BRIGHT
}
else
{
  cArrow=C_BRIGHT
  cBack= C_DARK
}
draw_sprite_stretched_ext(s_pixel,0,round(x+w-ARROW_MEDIUM_SIZE),round(y),ARROW_MEDIUM_SIZE,ARROW_MEDIUM_SIZE,cBack,1)
draw_sprite_ext(s_gui_arrow_medium,0,x+w,y,1,1,-90,cArrow,1)
//BUTTONS//////////////////////////////////////////////////////////////

//TABS/////////////////////////////////////////////////////////////////
draw_set_color(C_BRIGHT)
draw_set_font(font)
draw_set_halign(fa_center)
draw_set_valign(fa_center)

var tab_x,tabsAm;
tab_x=ARROW_MEDIUM_SIZE
tabsAm=ds_list_size(tabs)

scissorsSet(x+ARROW_MEDIUM_SIZE,y,w-ARROW_MEDIUM_SIZE*2,ARROW_MEDIUM_SIZE)
for(var i=0; i&lt;tabsAm i+=1)
{
  var tabCur=tabs[|i];  
  draw_sprite_stretched_ext(s_pixel,0,round(x+tab_x+tabOffset_x),round(y)+1,tabCur[|1]-1,ARROW_MEDIUM_SIZE-2+(tabActive==i),C_MEDIUM,1)
  draw_text(round(x+tab_x+tabOffset_x+tabCur[|1]/2),round(y+ARROW_MEDIUM_SIZE/2),tabCur[|0])
   
  tab_x+=tabCur[|1]
}
scissorsReset()
//TABS/////////////////////////////////////////////////////////////////
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
