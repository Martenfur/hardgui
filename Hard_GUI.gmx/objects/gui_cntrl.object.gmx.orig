<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///FORMS
scissorsInit()

formListDraw=ds_grid_create(0,2) //form lists
formListClick=ds_list_create()

//drag
windowDrag=  0     //drag enabling
windowDragId=noone //a window to drag
windowDragDx=0     //delta between mouse x and form x
windowDrawDy=0     //delta between mouse y and form y 
//drag

globalvar mbCheckGlobal,mbCheckPressGlobal,mbCheckReleaseGlobal;
mbCheckGlobal=       mouse_check_button(mb_left)
mbCheckPressGlobal=  mouse_check_button_pressed(mb_left)
mbCheckReleaseGlobal=mouse_check_button_released(mb_left)

//FORM IMITATION
w=        room_width 
h=        room_height
myform=   noone
clickable=0

mbCheck=            0       
mbCheckPress=       0
mbCheckRelease=     0
mbCheckRightRelease=0
//FORM IMITATION

allstr='!"#$%&amp;'+"'"+'()*+,-./0123456789:;&lt;=&gt;?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~АБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдеёжзийклмнопрстуфхцчшщъыьэюя '
globalvar font;
font=font_add_sprite_ext(s_gui_font,allstr,1,2)
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///KEY COMBINATIONS

keyCombo=ds_list_create()
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///CONTEXT MENU

contextMenu_x=0
contextMenu_y=0
contextMenu_w=0
contextMenu_h=0

contextMenu_wmin=192

contextMenuButtonSelected=-1
contextMenuButtonPressed= -1
contextMenuButtonPressedId=noone

contextMenuActiveId=noone

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///CONTEXT MENU

contextMenuButtonSelected=-1
contextMenuButtonPressed= -1
contextMenuButtonPressedId=noone

if contextMenuActiveId!=noone
{
  if mouse_check_button(mb_left) || mouse_check_button_released(mb_left) 
  {  
    if point_in_rectangle(mouse_x,mouse_y,contextMenu_x,    contextMenu_y,
                                          contextMenu_x+contextMenu_w,contextMenu_y+contextMenu_h)
    {
      var contextMenuL=ds_list_size(contextMenuActiveId);
      for(var i=0; i&lt;contextMenuL i+=1)
      {
        if point_in_rectangle(mouse_x,mouse_y,contextMenu_x,    contextMenu_y+ARROW_MEDIUM_SIZE*i,
                                              contextMenu_x+contextMenu_w,contextMenu_y+ARROW_MEDIUM_SIZE*(i+1))
        {
          contextMenuButtonSelected=i
          break
        }
      }
    } 
  }
 
  if mouse_check_button_released(mb_left)  
  {
    contextMenuButtonPressed=  contextMenuButtonSelected
    contextMenuButtonPressedId=contextMenuActiveId
    
    contextMenuActiveId=noone
  }
}


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///CLICK PROCESSING

clickable=1
if contextMenuButtonSelected=-1 &amp;&amp; contextMenuActiveId=noone
{
  mbCheckGlobal=            mouse_check_button         (mb_left)
  mbCheckPressGlobal=       mouse_check_button_pressed (mb_left)
  mbCheckReleaseGlobal=     mouse_check_button_released(mb_left)
  mbCheckRightReleaseGlobal=mouse_check_button_released(mb_right)
}
else
{
  mbCheckGlobal=            0
  mbCheckPressGlobal=       0
  mbCheckReleaseGlobal=     0
  mbCheckRightReleaseGlobal=0
}

mbCheck=            mbCheckGlobal       
mbCheckPress=       mbCheckPressGlobal  
mbCheckRelease=     mbCheckReleaseGlobal
mbCheckRightRelease=mbCheckRightReleaseGlobal

listL=ds_list_size(formListClick)

//resetting click
with(gui_form)
{
  clickable=          0
  mbCheck=            0
  mbCheckPress=       0
  mbCheckRelease=     0
  mbCheckRightRelease=0
}
//resetting click

if !windowDrag
{ 
  //WINDOW DRAG//////////////////////////////////////////////////////////////////////////////////////////
  for(var i=0; i&lt;listL i+=1)
  {
    if gui_formCheckActivity(formListClick[|i].myform) 
    &amp;&amp; formListClick[|i].active!=-1 
    &amp;&amp; formListClick[|i].isWindow 
    &amp;&amp; !gui_formCheckOverlay(mouse_x,mouse_y,formListClick[|i])
    {
      if _gui_formCheckRegionInsideParent(mouse_x,mouse_y,0,-HEADER_H,formListClick[|i].w,0,formListClick[|i])
      {
        var clickReset;
        clickReset=1
        if formListClick[|i].bHideEn &amp;&amp; _gui_formCheckRegionInsideParent(mouse_x,mouse_y,formListClick[|i].w-HEADER_H*2,-HEADER_H,formListClick[|i].w-HEADER_H,0,formListClick[|i])
        {
          //HIDE BUTTON
          if mbCheckReleaseGlobal
          {formListClick[|i].bHideCheck=1}
          else
          {
            if mbCheckGlobal
            {formListClick[|i].bHideHighlight=1}
          }
          //HIDE BUTTON
          formListClick[|i].clickable=2
          clickable=0      
        }
        else
        {
          if formListClick[|i].bCloseEn
          &amp;&amp; _gui_formCheckRegionInsideParent(mouse_x,mouse_y,formListClick[|i].w-HEADER_H,-HEADER_H,formListClick[|i].w,0,formListClick[|i])
          {
            //CLOSE BUTTON
            if mbCheckReleaseGlobal
            {formListClick[|i].bCloseCheck=1}
            else
            {
              if mbCheckGlobal
              {formListClick[|i].bCloseHighlight=1}
            }
            //CLOSE BUTTON
            formListClick[|i].clickable=2
            clickable=0
          }
          else
          {
            //DRAG
            if mbCheckPressGlobal
            {
              windowDragId=formListClick[|i]
              windowDragDx=mouse_x-xGlobal
              windowDragDy=mouse_y-yGlobal+HEADER_H
              windowDrag=  1
              clickReset=  0
            }
            formListClick[|i].clickable=2
            clickable=0
            //DRAG
          }
        }
      
        if mbCheckPress
        {_gui_formPopup(formListClick[|i])} 
      
        if clickReset
        {
          //resetting global click
          clickable=          0
          mbCheck=            0
          mbCheckPress=       0
          mbCheckRelease=     0
          mbCheckRightRelease=0
          //resetting global click
        }
        break
      }
    }
  }  
  //WINDOW DRAG//////////////////////////////////////////////////////////////////////////////////////////
} 



if !windowDrag
{
  //CLICK PROCESSING/////////////////////////////////////////////////////////////////////////////////////
  for(var i=0; i&lt;listL i+=1)
  {
    if formListClick[|i].active &amp;&amp; gui_formCheckActivity(formListClick[|i].myform) 
    {
      gui_formGetGlobalCoords(formListClick[|i]) //getting coordinates
      
      //CHECKING CLICK
      if point_in_rectangle(mouse_x,mouse_y,
                            xGlobal,yGlobal,
                            xGlobal+formListClick[|i].w,yGlobal+formListClick[|i].h)
      {
        if _gui_formCheckRegionInsideParent(mouse_x,mouse_y,0,0,formListClick[|i].w,formListClick[|i].h,formListClick[|i])
        {
          //giving click to form
          if clickable
          {formListClick[|i].clickable=1}
          formListClick[|i].mbCheck=       mbCheckGlobal
          formListClick[|i].mbCheckPress=  mbCheckPressGlobal
          formListClick[|i].mbCheckRelease=mbCheckReleaseGlobal
          formListClick[|i].mbCheckRightRelease=mbCheckRightReleaseGlobal
          //giving click to form
         
          if formListClick[|i].isWindow &amp;&amp; mbCheckPress //popup
          {_gui_formPopup(formListClick[|i])}
          
          //resetting global click
          clickable=          0
          mbCheck=            0
          mbCheckPress=       0
          mbCheckRelease=     0
          mbCheckRightRelease=0
          //resetting global click
          break
        }  
      }
      //CHECKING CLICK
    }
  }
  //CLICK PROCESSING/////////////////////////////////////////////////////////////////////////////////////  
}
else
{
  //DRAGGING
  with(windowDragId)
  {
    gui_formGetGlobalCoords(myform) //getting coordinates

    headerX=mouse_x-xGlobal-other.windowDragDx
    headerY=mouse_y-yGlobal-other.windowDragDy
  
    //drag borders
    var w_bor,h_bor;
  
    if instance_exists(myform)
    {
      w_bor=myform.w-w
      h_bor=myform.h-HEADER_H 
    }
    else
    {
      w_bor=room_width-w
      h_bor=room_height-HEADER_H
    }
  
    if w&lt;myform.w
    {
      if headerX&lt;0
      {headerX=0}
      if headerX&gt;w_bor
      {headerX=w_bor}
    }
    else
    {
     if headerX&gt;0
     {headerX=0}
     if headerX&lt;w_bor
     {headerX=w_bor}
    }
    if headerY&lt;0
    {headerY=0}
    if headerY&gt;h_bor
    {headerY=h_bor}
    //drag borders
  }
 
  //drag disabling
  if mbCheckReleaseGlobal || !mbCheckGlobal || windowDragId=noone
  {
    windowDrag= 0
    windowDragId=noone
  }
  //drag disabling
 
  //click resetting
  clickable=          0
  mbCheck=            0
  mbCheckPress=       0
  mbCheckRelease=     0
  mbCheckRightRelease=0
  //click resetting
 
  //DRAGGING
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///KEY COMBINATIONS

var keyComboCheck;

for(var i=0; i&lt;ds_list_size(keyCombo) i+=1)
{
  keyComboCheck=keyCombo[|i]

  keyComboCheck[|1]=keyComboCheck[|0]
  keyComboCheck[|0]=1
 
  for(var k=2; k&lt;ds_list_size(keyComboCheck) k+=1)
  {
    if !keyboard_check(keyComboCheck[|k])
    {
      keyComboCheck[|0]=0
      break
    }
  }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///DRAWING FORMS

for(var i=0; i&lt;ds_grid_width(formListDraw) i+=1)
{
  with(formListDraw[#i,0])
  {
    if !surface_exists(surf)
    {surf=surface_create(w,h)}
    
    if other.formListDraw[#i,1]&gt;=1 //checking if form is in another form
    {surface_set_target(myform.surf)}
    if !isWindow
    {
      if active
      {draw_surface(surf,x,y)}
    }
    else
    {_gui_windowDraw()}
    if other.formListDraw[#i,1]&gt;=1 //checking if form is in another form
    {surface_reset_target()}
     
    if !surface_exists(surf)
    {surf=surface_create(w,h)}
    
    surface_set_target(surf)
    draw_clear_alpha(cBkg,1)
    surface_reset_target()
  }
}


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///DRAWING CONTEXT MENU

if contextMenuActiveId!=noone
{
  var contextMenuL=ds_list_size(contextMenuActiveId);
  
  draw_sprite_stretched_ext(s_pixel,0,contextMenu_x-1,contextMenu_y-1,contextMenu_w+2,contextMenu_h+2,C_DARK,1)
  draw_sprite_stretched_ext(s_pixel,0,contextMenu_x,  contextMenu_y,  contextMenu_w,  contextMenu_h,C_MEDIUM,1)
  
  draw_set_halign(fa_left)
  draw_set_valign(fa_center)
  draw_set_color(C_BRIGHT)
  
  for(var i=0; i&lt;contextMenuL i+=1)
  {
    if contextMenuButtonSelected=i
    {
      draw_sprite_stretched_ext(s_pixel,0,contextMenu_x,contextMenu_y+ARROW_MEDIUM_SIZE*i,contextMenu_w,ARROW_MEDIUM_SIZE,C_BRIGHT,1)
      draw_set_color(C_DARK)
      draw_text(contextMenu_x+GUI_INDENT,contextMenu_y+ARROW_MEDIUM_SIZE*(i+0.5),contextMenuActiveId[|i])
      draw_set_color(C_BRIGHT)
    }
    else
    {draw_text(contextMenu_x+GUI_INDENT,contextMenu_y+ARROW_MEDIUM_SIZE*(i+0.5),contextMenuActiveId[|i])}
  }
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
